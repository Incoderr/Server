require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const fetch = require('node-fetch');

const app = express();

mongoose
  .connect(process.env.MONGO_URI)
  .then(() => {
    console.log('‚úÖ Connected to MongoDB');
    mongoose.connection.db.listCollections().toArray((err, collections) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', err);
      } else {
        console.log('üìå –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', collections.map(col => col.name));
      }
    });
  })
  .catch(err => console.error('‚ùå MongoDB connection error:', err));

const animeSchema = new mongoose.Schema({
  TitleRu: String,
  TitleEng: String,
  PosterRu: String,
  TTID: String,
  Year: String,
  IMDbRating: String,
  TMDbRating: Number,
  Status: String,
  Backdrop: String,
  OverviewRu: String,
  Tags: [String],
  Genres: [String],
}, { collection: 'anime_list' });

const Anime = mongoose.model('Anime', animeSchema);

app.use(cors({
  origin: ['http://localhost:5173', 'https://animeinc.vercel.app/'], // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –≤–∞—à–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  methods: ['GET', 'POST'], // –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  allowedHeaders: ['Content-Type'], // –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
}));
app.use(express.json());

// –í –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–º —Ñ–∞–π–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, index.js)
app.get('/api/anime', async (req, res) => {
  try {
    const { genre, search, fields, limit, sort } = req.query;
    console.log('üìå –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { genre, search, fields, limit, sort });

    let query = {};
    if (genre) query.Genres = { $in: [genre] };
    if (search) query.TitleRu = { $regex: new RegExp(search, 'i') };

    console.log('üìå –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –∫ MongoDB:', query);

    let dbQuery = Anime.find(query);
    if (fields) dbQuery = dbQuery.select(fields.split(',').join(' '));
    if (limit) dbQuery = dbQuery.limit(parseInt(limit));
    if (sort) dbQuery = dbQuery.sort(sort); // –ù–∞–ø—Ä–∏–º–µ—Ä, "TMDbRating" –∏–ª–∏ "-TMDbRating"

    const animeList = await dbQuery;
    console.log(`üìå –ù–∞–π–¥–µ–Ω–æ:`, animeList.length);
    res.json(animeList);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∏–º–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∏–º–µ' });
  }
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∏–º–µ –ø–æ TTID
app.get('/api/anime/:ttid', async (req, res) => {
  try {
    const { ttid } = req.params;
    console.log('üìå –ó–∞–ø—Ä–æ—Å –∞–Ω–∏–º–µ —Å TTID:', ttid);

    const anime = await Anime.findOne({ TTID: ttid });
    if (!anime) {
      return res.status(404).json({ error: '–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    console.log('üìå –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–µ:', anime);
    res.json(anime);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∏–º–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è AniList API
app.post('/api/anilist', async (req, res) => {
  try {
    const { query, variables } = req.body;
    console.log('üìå –ó–∞–ø—Ä–æ—Å –∫ AniList:', { query, variables });

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 8000); // –¢–∞–π–º–∞—É—Ç 8 —Å–µ–∫—É–Ω–¥

    const response = await fetch('https://graphql.anilist.co', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({ query, variables }),
      signal: controller.signal, // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–º–µ–Ω—ã
    });

    clearTimeout(timeoutId); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω

    if (!response.ok) {
      throw new Error(`AniList API –æ—Ç–≤–µ—Ç–∏–ª —Å—Ç–∞—Ç—É—Å–æ–º: ${response.status}`);
    }

    const data = await response.json();
    console.log('üìå –û—Ç–≤–µ—Ç –æ—Ç AniList:', data);

    // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ MongoDB
    const anilistMedia = data.data?.Page?.media || [];
    const enhancedMedia = await Promise.all(
      anilistMedia.map(async (anime) => {
        const dbAnime = await Anime.findOne({ TitleRu: anime.title.romaji });
        return {
          ...anime,
          ttid: dbAnime?.TTID || null,
          backdrop: dbAnime?.Backdrop || null,
        };
      })
    );

    res.json({ ...data, data: { ...data.data, Page: { ...data.data.Page, media: enhancedMedia } } });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AniList:', error.message);
    if (error.name === 'AbortError') {
      res.status(504).json({ error: '–ó–∞–ø—Ä–æ—Å –∫ AniList –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è' });
    } else {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AniList' });
    }
  }
});

module.exports = app;
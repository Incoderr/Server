require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const fetch = require('node-fetch');

const app = express();

mongoose
  .connect(process.env.MONGO_URI)
  .then(() => {
    console.log('‚úÖ Connected to MongoDB');
    mongoose.connection.db.listCollections().toArray((err, collections) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', err);
      } else {
        console.log('üìå –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', collections.map(col => col.name));
      }
    });
  })
  .catch(err => console.error('‚ùå MongoDB connection error:', err));

const animeSchema = new mongoose.Schema({
  Title: String,
  TitleEng: String,
  Poster: String,
  imdbID: String, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ —ç—Ç–æ TTID
  Year: String,
  imdbRating: String,
  TMDbRating: Number,
  Status: String,
  Backdrop: String,
  OverviewRu: String,
  Tags: [String],
  Genre: String, // –í —Å—Ö–µ–º–µ —É–∫–∞–∑–∞–Ω–æ Genre, –∞ –Ω–µ Genres ‚Äî –∏—Å–ø—Ä–∞–≤–ª—é –Ω–∏–∂–µ
}, { collection: 'anime_list' });

const Anime = mongoose.model('Anime', animeSchema);

app.use(cors({
  origin: ['http://localhost:5173', 'https://animeinc.vercel.app'],
  methods: ['GET', 'POST'],
  allowedHeaders: ['Content-Type'],
}));
app.use(express.json());

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
app.get('/api/anime', async (req, res) => {
  try {
    const { genre, search, fields, limit, sort } = req.query;
    console.log('üìå –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { genre, search, fields, limit, sort });

    let query = {};
    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º Genre –≤–º–µ—Å—Ç–æ Genres, —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ
    if (genre) query.Genre = { $in: [genre] };
    if (search) query.Title = { $regex: new RegExp(search, 'i') };

    console.log('üìå –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –∫ MongoDB:', query);

    let dbQuery = Anime.find(query);
    if (fields) dbQuery = dbQuery.select(fields.split(',').join(' '));
    if (limit) dbQuery = dbQuery.limit(parseInt(limit));
    if (sort) dbQuery = dbQuery.sort(sort);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const animeList = await dbQuery;

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ imdbID (–∏–ª–∏ TTID)
    const uniqueAnime = Array.from(new Map(animeList.map(item => [item.imdbID, item])).values());
    
    console.log(`üìå –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${animeList.length}, –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${uniqueAnime.length}`);
    res.json(uniqueAnime);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∏–º–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∏–º–µ' });
  }
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∏–º–µ –ø–æ TTID
app.get('/api/anime/:imdbID', async (req, res) => {
  try {
    const { imdbID } = req.params;
    console.log('üìå –ó–∞–ø—Ä–æ—Å –∞–Ω–∏–º–µ —Å TTID:', imdbID);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º imdbID –≤–º–µ—Å—Ç–æ TTID, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    const anime = await Anime.findOne({ imdbID: imdbID });
    if (!anime) {
      return res.status(404).json({ error: '–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    console.log('üìå –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–µ:', anime);
    res.json(anime);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∏–º–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è AniList API
app.post('/api/anilist', async (req, res) => {
  try {
    const { query, variables } = req.body;
    console.log('üìå –ó–∞–ø—Ä–æ—Å –∫ AniList:', { query, variables });

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 8000);

    const response = await fetch('https://graphql.anilist.co', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({ query, variables }),
      signal: controller.signal,
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      throw new Error(`AniList API –æ—Ç–≤–µ—Ç–∏–ª —Å—Ç–∞—Ç—É—Å–æ–º: ${response.status}`);
    }

    const data = await response.json();
    console.log('üìå –û—Ç–≤–µ—Ç –æ—Ç AniList:', data);

    const anilistMedia = data.data?.Page?.media || [];
    const enhancedMedia = await Promise.all(
      anilistMedia.map(async (anime) => {
        const dbAnime = await Anime.findOne({ Title: anime.title.romaji });
        return {
          ...anime,
          imdbID: dbAnime?.imdbID || null, // –ò—Å–ø–æ–ª—å–∑—É–µ–º imdbID –≤–º–µ—Å—Ç–æ TTID
          backdrop: dbAnime?.Backdrop || null,
        };
      })
    );

    res.json({ ...data, data: { ...data.data, Page: { ...data.data.Page, media: enhancedMedia } } });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AniList:', error.message);
    if (error.name === 'AbortError') {
      res.status(504).json({ error: '–ó–∞–ø—Ä–æ—Å –∫ AniList –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è' });
    } else {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AniList' });
    }
  }
});

module.exports = app;
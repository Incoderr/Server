require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const app = express();

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('‚úÖ Connected to MongoDB');
  mongoose.connection.db.listCollections().toArray((err, collections) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', err);
    } else {
      console.log('üìå –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', collections.map(col => col.name));
    }
  });
}).catch(err => console.error('‚ùå MongoDB connection error:', err));

const animeSchema = new mongoose.Schema({
  TitleRu: String,
  TitleEng: String,
  PosterRu: String,
  TTID: String,
  Year: String,
  IMDbRating: String,
  TMDbRating: Number,
  Status: String,
  Backdrop: String,
  OverviewRu: String,
  Tags: [String],
  Genres: [String]
}, { collection: 'anime_list' });

const Anime = mongoose.model('Anime', animeSchema);

app.use(cors());
app.use(express.json());

// –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ
app.get('/api/anime', async (req, res) => {
  try {
    const { genre, search } = req.query;
    console.log('üìå –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { genre, search });

    let query = {};
    if (genre) {
      query.Genres = { $in: [genre] };
    }
    if (search) {
      query.TitleRu = { $regex: new RegExp(search, 'i') };
    }

    console.log('üìå –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –∫ MongoDB:', query);

    const animeList = await Anime.find(query, 'TitleRu PosterRu Genres TTID');
    console.log(`üìå –ù–∞–π–¥–µ–Ω–æ:`, animeList.length);
    res.json(animeList);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∏–º–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∏–º–µ' });
  }
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∏–º–µ –ø–æ TTID
app.get('/api/anime/:ttid', async (req, res) => {
  try {
    const { ttid } = req.params;
    console.log('üìå –ó–∞–ø—Ä–æ—Å –∞–Ω–∏–º–µ —Å TTID:', ttid);

    const anime = await Anime.findOne({ TTID: ttid });
    if (!anime) {
      return res.status(404).json({ error: '–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    console.log('üìå –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–µ:', anime);
    res.json(anime);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∏–º–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = app; // ‚ùó –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º app, –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º app.listen()
